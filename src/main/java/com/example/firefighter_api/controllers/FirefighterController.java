package com.example.firefighter_api.controllers;

import java.time.LocalDate;

import com.example.firefighter_api.entities.Firefighter;
import com.example.firefighter_api.entities.Property;
import com.example.firefighter_api.repositories.FirefighterRepository;
import com.example.firefighter_api.repositories.PropertyRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/firefighter") // This means URL's start with /firefighter
public class FirefighterController {

    @Autowired // This means to get the bean called firefighterRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private FirefighterRepository firefighterRepository;

    @Autowired
    private PropertyRepository propertyRepository;

    @CrossOrigin
    @PostMapping(path = "/new") // Map ONLY POST Requests
    public @ResponseBody ResponseEntity<Firefighter> newFirefighter(@RequestParam(required = false) String datestring) {
        LocalDate date;

        if (datestring == null) {
            date = LocalDate.now();
        } else {
            date = LocalDate.parse(datestring);
        }

        int dayCounter = (int) date.toEpochDay();
        int offset = Integer.parseInt(propertyRepository.findByName("offset").getValue());
        int id = (int) ((dayCounter + offset) % firefighterRepository.count());

        return ResponseEntity.ok(firefighterRepository.findAll(Sort.by(Sort.Direction.ASC, "name")).get(id));
    }

    @CrossOrigin
    @PostMapping(path = "/skip") // Map ONLY POST Requests
    public @ResponseBody ResponseEntity<Integer> skipFirefighter() {

        Property offset=propertyRepository.findByName("offset");
        Integer newOffset;
        newOffset = Integer.parseInt(offset.getValue()) + 1;
        offset.setValue(String.valueOf(newOffset));
        propertyRepository.save(offset);

        return ResponseEntity.ok(newOffset);
    }
}






